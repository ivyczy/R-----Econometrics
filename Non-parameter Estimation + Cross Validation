##Non parameter
#NW esitimation
subd<-subset(d,d$year==2013&d$nilf==0)
    #box for weight
plot(ksmooth(subd$age,subd$nilf, "box", bandwidth = 1), col = 1)
lines(ksmooth(subd$age,subd$nilf, "box", bandwidth = 10), col = 2)
lines(ksmooth(subd$age, subd$nilf, "box", bandwidth = 20), col = 3)
lines(ksmooth(subd$age, subd$nilf, "box", bandwidth = 40), col = 4)
    #normal distribution for weight
plot(ksmooth(subd$age,subd$nilf, "normal", bandwidth = 1), col = 1)
lines(ksmooth(subd$age,subd$nilf, "normal", bandwidth = 10), col = 2)
lines(ksmooth(subd$age, subd$nilf, "normal", bandwidth = 20), col = 3)
lines(ksmooth(subd$age, subd$nilf, "normal", bandwidth = 40), col = 4)
#Local linear regression "loess" smoothing 
    #"loess" allows for both first and second degree polynomial smoothing
fit.lm<-lm(subd$nilf~subd$age)
fit.loess1<-loess(subd$nilf~subd$age,span=1, degree=1)
fit.loess2<-loess(subd$nilf~subd$age,span=1, degree=2)
plot(subd$age,predict(fit.lm),type="l",lwd=2,ylim=c(0,1))
lines(subd$age,predict(fit.loess1),col=1,lty=2)
lines(subd$age,predict(fit.loess2),col=4)
    #span is bandwidth control
x<-seq(-10,10,length=1000)
y<-sin(x)+rnorm(1000,0,1)
fit.loess1<-loess(y~x, family="gaussian",span=1, degree=1)
fit.loess2<-loess(y~x, family="gaussian",span=.05, degree=1)
plot(x,predict(fit.loess1),type="l",lwd=2,ylim=c(-2,2))
lines(x,predict(fit.loess2),col=4,lty=2) #span=o.o5 fits BETTER
    #Choose Optimal Bandwidth
small<-data.frame(y,x)
for(h in 1:20){
  for(i in 1:nrow(small)){
    smalldrop<-small[i,]
    smallkeep<-small[-i,]
    fit<-loess(y~x,smallkeep, family="gaussian",span=(h/20), degree=1)
    dropfit<-predict(fit,smalldrop,se=FALSE)
    sqrerr<-(smalldrop$y-as.numeric(dropfit))^2
    if(i*h==1){results<-data.frame(h,i,sqrerr)}
    if(i*h>1){results<-rbind(results,data.frame(h,i,sqrerr))}
  }
}
tapply(results$sqrerr,results$h,FUN=sum,na.rm=TRUE) #So we choose h=1 which have smallest SSR
#Series estimation example: linear high polynomial&interact
x<-seq(-10,10,by=1)
xnew<-data.frame(x=seq(-5,5,by=0.01))
xnew$x2<-xnew$x^2
xnew$x3<-xnew$x^3
xnew$x4<-xnew$x^4
xnew$x5<-xnew$x^5
xnew$x6<-xnew$x^6
xnew$x7<-xnew$x^7
xnew$x8<-xnew$x^8
xnew$x9<-xnew$x^9
xnew$x10<-xnew$x^10
ynew<-1/(1+xnew$x^2)
plot(ynew~xnew$x,ylim=c(-0.25,1),cex=0.25)
lines(predict(lm(y~x+x2+x3+x4+x5+x6+x7+x8+x9+x10),xnew)~xnew$x,col=4,lwd=2)
#Spline estimation example
xnew$k1<-ifelse(xnew$x>(-3),(xnew$x-(-3))^3,0)
xnew$k2<-ifelse(xnew$x>(-1),(xnew$x-(-1))^3,0)
xnew$k3<-ifelse(xnew$x>(1),(xnew$x-1)^3,0)
xnew$k4<-ifelse(xnew$x>(3),(xnew$x-(3))^3,0)
plot(ynew~xnew$x,ylim=c(-0.25,1))
lines(predict(lm(y~x+x2+x3+x4+x5+x6+x7+x8+x9+x10),xnew)~xnew$x,col=4,lwd=2)
lines(predict(lm(y~x+x2+x3+k1+k2+k3+k4),xnew)~xnew$x,col=1,lwd=2)
#Gam Package
install.packages("gam")
library(gam)
gamresults<-gam(nilf ~s(age,4), data=subd)
summary(gamresults)
plot(gamresults,se=TRUE,rug=FALSE,terms="s")
gamresults<-gam(nilf ~s(age,4)+educ, data=subd)
summary(gamresults)
par(mfrow=c(1,2))
plot(gamresults,se=TRUE,rug=FALSE,terms="s")
abline(v=0)
abline(h=0)
plot(gamresults,se=TRUE,rug=FALSE,terms="educ")
